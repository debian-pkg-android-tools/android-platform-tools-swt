Author: Kai-Chung Yan
Last-Update: 2015-08-02
Description: Set full classpath for the Java program launchers
--- a/ddms/app/etc/ddms
+++ b/ddms/app/etc/ddms
@@ -36,21 +36,6 @@
 jarfile=ddms.jar
 frameworkdir="$progdir"
 libdir="$progdir"
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    frameworkdir=`dirname "$progdir"`/tools/lib
-    libdir=`dirname "$progdir"`/tools/lib
-fi
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    frameworkdir=`dirname "$progdir"`/framework
-    libdir=`dirname "$progdir"`/lib
-fi
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    echo `basename "$prog"`": can't find $jarfile"
-    exit 1
-fi
 
 
 # Check args.
@@ -82,30 +67,14 @@
 # else, if running in the Android source tree, then look for the correct swt folder in prebuilt
 # else, look for the correct swt folder in the SDK under tools/lib/
 swtpath=""
-if [ -n "$ANDROID_SWT" ]; then
-    swtpath="$ANDROID_SWT"
-else
-    vmarch=`${javaCmd} -jar "${frameworkdir}"/archquery.jar`
-    if [ -n "$ANDROID_BUILD_TOP" ]; then
-        osname=`uname -s | tr A-Z a-z`
-        swtpath="${ANDROID_BUILD_TOP}/prebuilts/tools/${osname}-${vmarch}/swt"
-    else
-        swtpath="${frameworkdir}/${vmarch}"
-    fi
-fi
-
-if [ ! -d "$swtpath" ]; then
-    echo "SWT folder '${swtpath}' does not exist."
-    echo "Please export ANDROID_SWT to point to the folder containing swt.jar for your platform."
-    exit 1
-fi
 
 if [ -x $progdir/monitor ]; then
     echo "The standalone version of DDMS is deprecated."
     echo "Please use Android Device Monitor (tools/monitor) instead."
 fi
+classpath="`cat /usr/share/ddms/classpath`:/usr/share/java/ddms.jar"
 exec "$javaCmd" \
     -Xmx256M $os_opts $java_debug \
     -Dcom.android.ddms.bindir="$progdir" \
-    -classpath "$jarpath:$swtpath/swt.jar" \
+    -classpath "$classpath" \
     com.android.ddms.Main "$@"
--- a/hierarchyviewer2/app/etc/hierarchyviewer
+++ b/hierarchyviewer2/app/etc/hierarchyviewer
@@ -37,21 +37,6 @@
 jarfile=hierarchyviewer2.jar
 frameworkdir="$progdir"
 libdir="$progdir"
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    frameworkdir=`dirname "$progdir"`/tools/lib
-    libdir=`dirname "$progdir"`/tools/lib
-fi
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    frameworkdir=`dirname "$progdir"`/framework
-    libdir=`dirname "$progdir"`/lib
-fi
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    echo `basename "$prog"`": can't find $jarfile"
-    exit 1
-fi
 
 
 # Check args.
@@ -83,32 +68,16 @@
 # else, if running in the Android source tree, then look for the correct swt folder in prebuilt
 # else, look for the correct swt folder in the SDK under tools/lib/
 swtpath=""
-if [ -n "$ANDROID_SWT" ]; then
-    swtpath="$ANDROID_SWT"
-else
-    vmarch=`${javaCmd} -jar "${frameworkdir}"/archquery.jar`
-    if [ -n "$ANDROID_BUILD_TOP" ]; then
-        osname=`uname -s | tr A-Z a-z`
-        swtpath="${ANDROID_BUILD_TOP}/prebuilts/tools/${osname}-${vmarch}/swt"
-    else
-        swtpath="${frameworkdir}/${vmarch}"
-    fi
-fi
-
-if [ ! -d "$swtpath" ]; then
-    echo "SWT folder '${swtpath}' does not exist."
-    echo "Please export ANDROID_SWT to point to the folder containing swt.jar for your platform."
-    exit 1
-fi
 
 if [ -x $progdir/monitor ]; then
     echo "The standalone version of hieararchyviewer is deprecated."
     echo "Please use Android Device Monitor (tools/monitor) instead."
 fi
+classpath="`cat /usr/share/hierarchyviewer/classpath`:/usr/share/java/hierarchyviewer2.jar"
 # need to use "java.ext.dirs" because "-jar" causes classpath to be ignored
 # might need more memory, e.g. -Xmx128M
 exec "$javaCmd" \
     -Xmx512M $os_opts $java_debug \
     -Dcom.android.hierarchyviewer.bindir="$progdir" \
-    -classpath "$jarpath:$swtpath/swt.jar" \
+    -classpath "$classpath" \
     com.android.hierarchyviewer.HierarchyViewerApplication "$@"
--- a/monkeyrunner/etc/monkeyrunner
+++ b/monkeyrunner/etc/monkeyrunner
@@ -36,21 +36,6 @@
 jarfile=monkeyrunner.jar
 frameworkdir="$progdir"
 libdir="$progdir"
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    frameworkdir=`dirname "$progdir"`/tools/lib
-    libdir=`dirname "$progdir"`/tools/lib
-fi
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    frameworkdir=`dirname "$progdir"`/framework
-    libdir=`dirname "$progdir"`/lib
-fi
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    echo `basename "$prog"`": can't find $jarfile"
-    exit 1
-fi
 
 
 # Check args.
@@ -74,26 +59,10 @@
 # else, if running in the Android source tree, then look for the correct swt folder in prebuilt
 # else, look for the correct swt folder in the SDK under tools/lib/
 swtpath=""
-if [ -n "$ANDROID_SWT" ]; then
-    swtpath="$ANDROID_SWT"
-else
-    vmarch=`java -jar "${frameworkdir}"/archquery.jar`
-    if [ -n "$ANDROID_BUILD_TOP" ]; then
-        osname=`uname -s | tr A-Z a-z`
-        swtpath="${ANDROID_BUILD_TOP}/prebuilts/tools/${osname}-${vmarch}/swt"
-    elif [ -d "$frameworkdir/$vmarch" ]; then
-        swtpath="${frameworkdir}/${vmarch}"
-    else
-        swtpath="${frameworkdir}"
-    fi
-fi
 
-if [ ! -d "$swtpath" ]; then
-    echo "SWT folder '${swtpath}' does not exist."
-    echo "Please export ANDROID_SWT to point to the folder containing swt.jar for your platform."
-    exit 1
-fi
+classpath="`cat /usr/share/monkeyrunner/classpath`:/usr/share/java/monkeyrunner.jar"
+mainclass=com.android.monkeyrunner.MonkeyRunnerStarter
 
 # need to use "java.ext.dirs" because "-jar" causes classpath to be ignored
 # might need more memory, e.g. -Xmx128M
-exec java -Xmx128M $os_opts $java_debug -Djava.ext.dirs="$frameworkdir:$swtpath" -Djava.library.path="$libdir" -Dcom.android.monkeyrunner.bindir="$progdir" -jar "$jarpath" "$@"
+exec java -Xmx128M $os_opts $java_debug -Djava.ext.dirs="$frameworkdir:$swtpath" -Djava.library.path="$libdir" -Dcom.android.monkeyrunner.bindir="$progdir" -cp "$classpath" "$mainclass" "$@"
--- a/traceview/etc/traceview
+++ b/traceview/etc/traceview
@@ -38,21 +38,6 @@
 jarfile=traceview.jar
 frameworkdir="$progdir"
 libdir="$progdir"
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    frameworkdir=`dirname "$progdir"`/tools/lib
-    libdir=`dirname "$progdir"`/tools/lib
-fi
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    frameworkdir=`dirname "$progdir"`/framework
-    libdir=`dirname "$progdir"`/lib
-fi
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    echo "${progname}: can't find $jarfile"
-    exit 1
-fi
 
 javaCmd="java"
 
@@ -80,29 +65,11 @@
 # else, if running in the Android source tree, then look for the correct swt folder in prebuilt
 # else, look for the correct swt folder in the SDK under tools/lib/
 swtpath=""
-if [ -n "$ANDROID_SWT" ]; then
-    swtpath="$ANDROID_SWT"
-else
-    vmarch=`${javaCmd} -jar "${frameworkdir}"/archquery.jar`
-    if [ -n "$ANDROID_BUILD_TOP" ]; then
-        osname=`uname -s | tr A-Z a-z`
-        swtpath="${ANDROID_BUILD_TOP}/prebuilts/tools/${osname}-${vmarch}/swt"
-    else
-        swtpath="${frameworkdir}/${vmarch}"
-    fi
-fi
-
-# Combine the swtpath and the framework dir path.
-if [ -d "$swtpath" ]; then
-    frameworkdir="${swtpath}:${frameworkdir}"
-else
-    echo "SWT folder '${swtpath}' does not exist."
-    echo "Please export ANDROID_SWT to point to the folder containing swt.jar for your platform."
-    exit 1
-fi
 
 if [ -x $progdir/monitor ]; then
     echo "The standalone version of traceview is deprecated."
     echo "Please use Android Device Monitor (tools/monitor) instead."
 fi
-exec "${javaCmd}" $javaOpts -Djava.ext.dirs="$frameworkdir" -Dcom.android.traceview.toolsdir="$progdir" -jar "$jarpath" "$@"
+classpath="`cat /usr/share/traceview/classpath`:/usr/share/java/traceview.jar"
+mainclass=com.android.traceview.MainWindow
+exec "${javaCmd}" $javaOpts -Djava.ext.dirs="$frameworkdir" -Dcom.android.traceview.toolsdir="$progdir" -cp "$classpath" "$mainclass" "$@"
--- a/uiautomatorviewer/etc/uiautomatorviewer
+++ b/uiautomatorviewer/etc/uiautomatorviewer
@@ -38,21 +38,6 @@
 jarfile=uiautomatorviewer.jar
 frameworkdir="$progdir"
 libdir="$progdir"
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    frameworkdir=`dirname "$progdir"`/tools/lib
-    libdir=`dirname "$progdir"`/tools/lib
-fi
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    frameworkdir=`dirname "$progdir"`/framework
-    libdir=`dirname "$progdir"`/lib
-fi
-if [ ! -r "$frameworkdir/$jarfile" ]
-then
-    echo "${progname}: can't find $jarfile"
-    exit 1
-fi
 
 javaCmd="java"
 
@@ -80,25 +65,7 @@
 # else, if running in the Android source tree, then look for the correct swt folder in prebuilt
 # else, look for the correct swt folder in the SDK under tools/lib/
 swtpath=""
-if [ -n "$ANDROID_SWT" ]; then
-    swtpath="$ANDROID_SWT"
-else
-    vmarch=`${javaCmd} -jar "${frameworkdir}"/archquery.jar`
-    if [ -n "$ANDROID_BUILD_TOP" ]; then
-        osname=`uname -s | tr A-Z a-z`
-        swtpath="${ANDROID_BUILD_TOP}/prebuilts/tools/${osname}-${vmarch}/swt"
-    else
-        swtpath="${frameworkdir}/${vmarch}"
-    fi
-fi
-
-# Combine the swtpath and the framework dir path.
-if [ -d "$swtpath" ]; then
-    frameworkdir="${swtpath}:${frameworkdir}"
-else
-    echo "SWT folder '${swtpath}' does not exist."
-    echo "Please export ANDROID_SWT to point to the folder containing swt.jar for your platform."
-    exit 1
-fi
 
-exec "${javaCmd}" $javaOpts -Djava.ext.dirs="$frameworkdir" -Dcom.android.uiautomator.bindir="$progdir" -jar "$jarpath" "$@"
+classpath="`cat /usr/share/uiautomatorviewer/classpath`:/usr/share/java/uiautomatorviewer.jar"
+mainclass=com.android.uiautomator.UiAutomatorViewer
+exec "${javaCmd}" $javaOpts -Djava.ext.dirs="$frameworkdir" -Dcom.android.uiautomator.bindir="$progdir" -cp "$classpath" "$mainclass" "$@"
